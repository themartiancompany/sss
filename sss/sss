#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
_share="${_bin}/../share"
source \
  "${_lib}/libcrash-bash/crash-bash"

# shellcheck disable=SC2034
_global_variables() {
  target_host=""
  session_name=""
  color=""
  quiet=""
}

# Check all required programs
# are available
_requirements() {
  local \
    _deps=() \
    _dep
  _deps=(
    'dynssh'
    'screen'
    'hotnamectl'
  )
  for _dep \
    in "${_deps[@]}"; do
    _check_cmd \
      "${_dep}"
  done
}

_screen_run() {
  local \
    _session="${1}" \
    _cmd="${2}" \
    _stuff \
    _location
  _location="$( \
    mktemp)"
  _stuff='stuff '"${_cmd}"'\015'
  screen \
    -x \
      "${_session}" \
    -L \
      -Logfile \
        "${_location}" \
    -m \
    -d \
    -X \
      "${_stuff}"
  _msg_info \
    "session ${_session}: running ${_cmd}"
  _msg_info \
    "output saved to: ${_location}"
  cat \
    "${_location}"
}

# ssssssssssss
# $1: target host
# $2: session name
# $@: command
_sss() {
  local \
    _host="${1}" \
    _session="${2}" \
    _cmd=() \
    _session_name \
    _existing
  shift \
    2
  _cmd=(
    "$@"
  )
  _session_name="${_host}_${_session}"
  echo hi
  _existing="$( \
    screen \
      -ls | \
    grep \
      "${_session_name}")"
  _msg_info \
    "found ${_existing}"
  [[ "${_existing}" != "" ]] && \
    _screen_run \
      "${_session_name}" \
      "hotnamectl"
  # _read_conf
}

_read_conf() {
  local \
    _conf \
    _dir \
    _hostname=""
  _conf="${_conf_dir}/screens.cfg"
  _check_conf \
    "${_conf}"
  _cfg="$( \
    cat \
      "${_conf}")"
  _cfg="$( \
    echo \
      "${_cfg}" | \
      sed \
        -e \
          "/# */d" | \
        grep \
          "=" )"
  [[ "${_cfg}" == '' ]] && \
    echo \
      "ERROR: empty configuration file!" && \
    return \
      1
}

_check_cmd_override(){
  local \
    _cmd="${1}" \
    _cmd_var \
    _flag
  _cmd_var="$( \
    echo \
      "${_cmd}" | \
      sed \
        "s/-/_/g")"
  command \
     -v \
       "${_cmd}" &> \
       /dev/null
  printf \
    -v \
    "_${_cmd_var}" \
    "$( \
      which \
        "${_cmd}")"
  _flag=true
  [ -e "${_path}/${_cmd}" ] && \
    printf \
      -v \
        "_${_cmd_var}" \
      "${_path}/${_cmd}" && \
    _flag=true
  [[ "${_flag}" != "true" ]] && \
    _msg_error \
      "Install ${_cmd}" \
      1
}

_set_overrides() {
  _set_override \
    "target" \
    "host" \
    "$(hotnamectl)"
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
Sssssssssssssssh

Usage:
  $(_get "app" "name")
    [options]
    <session_name>
  options:
     -t                   Target host.
                          Default: $( \
                            _get \
                              "target" \
                              "host")
     -c                   Colors.
     -h                   This message.
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_globals
_global_variables
_requirements
# shellcheck disable=SC2004
# shellcheck disable=SC2034
while \
  getopts \
    't:cvh?' \
    arg; do
  case \
    "${arg}" in
    t) override_target_host="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
(( ${#} < 1 )) && \
  _usage \
    1
_set \
  "session" \
  "name" \
  "${1}"
_set_overrides
_sss \
  "$(_get \
      "target" \
      "host")" \
  "$(_get \
      "session" \
      "name")"

# vim:set sw=2 sts=-1 et:
